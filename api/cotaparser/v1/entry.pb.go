// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: api/cotaparser/v1/entry.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CodeHash string `protobuf:"bytes,1,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	HashType string `protobuf:"bytes,2,opt,name=hashType,proto3" json:"hashType,omitempty"`
	Args     string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{0}
}

func (x *Script) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

func (x *Script) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *Script) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type DefineCotaNFTId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmtType string `protobuf:"bytes,1,opt,name=smtType,proto3" json:"smtType,omitempty"`
	CotaId  string `protobuf:"bytes,2,opt,name=cotaId,proto3" json:"cotaId,omitempty"`
}

func (x *DefineCotaNFTId) Reset() {
	*x = DefineCotaNFTId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineCotaNFTId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineCotaNFTId) ProtoMessage() {}

func (x *DefineCotaNFTId) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineCotaNFTId.ProtoReflect.Descriptor instead.
func (*DefineCotaNFTId) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{1}
}

func (x *DefineCotaNFTId) GetSmtType() string {
	if x != nil {
		return x.SmtType
	}
	return ""
}

func (x *DefineCotaNFTId) GetCotaId() string {
	if x != nil {
		return x.CotaId
	}
	return ""
}

type DefineCotaNFTValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Issued    uint32 `protobuf:"varint,2,opt,name=issued,proto3" json:"issued,omitempty"`
	Configure uint32 `protobuf:"varint,3,opt,name=configure,proto3" json:"configure,omitempty"`
}

func (x *DefineCotaNFTValue) Reset() {
	*x = DefineCotaNFTValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineCotaNFTValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineCotaNFTValue) ProtoMessage() {}

func (x *DefineCotaNFTValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineCotaNFTValue.ProtoReflect.Descriptor instead.
func (*DefineCotaNFTValue) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{2}
}

func (x *DefineCotaNFTValue) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *DefineCotaNFTValue) GetIssued() uint32 {
	if x != nil {
		return x.Issued
	}
	return 0
}

func (x *DefineCotaNFTValue) GetConfigure() uint32 {
	if x != nil {
		return x.Configure
	}
	return 0
}

type DefineCotaNFTKeyVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*DefineCotaNFTId `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *DefineCotaNFTKeyVec) Reset() {
	*x = DefineCotaNFTKeyVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineCotaNFTKeyVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineCotaNFTKeyVec) ProtoMessage() {}

func (x *DefineCotaNFTKeyVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineCotaNFTKeyVec.ProtoReflect.Descriptor instead.
func (*DefineCotaNFTKeyVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{3}
}

func (x *DefineCotaNFTKeyVec) GetKeys() []*DefineCotaNFTId {
	if x != nil {
		return x.Keys
	}
	return nil
}

type DefineCotaNFTValueVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*DefineCotaNFTValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *DefineCotaNFTValueVec) Reset() {
	*x = DefineCotaNFTValueVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineCotaNFTValueVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineCotaNFTValueVec) ProtoMessage() {}

func (x *DefineCotaNFTValueVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineCotaNFTValueVec.ProtoReflect.Descriptor instead.
func (*DefineCotaNFTValueVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{4}
}

func (x *DefineCotaNFTValueVec) GetValues() []*DefineCotaNFTValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type Define struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefineKeys   *DefineCotaNFTKeyVec   `protobuf:"bytes,1,opt,name=defineKeys,proto3" json:"defineKeys,omitempty"`
	DefineValues *DefineCotaNFTValueVec `protobuf:"bytes,2,opt,name=defineValues,proto3" json:"defineValues,omitempty"`
	Proof        string                 `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	Action       string                 `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Define) Reset() {
	*x = Define{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Define) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Define) ProtoMessage() {}

func (x *Define) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Define.ProtoReflect.Descriptor instead.
func (*Define) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{5}
}

func (x *Define) GetDefineKeys() *DefineCotaNFTKeyVec {
	if x != nil {
		return x.DefineKeys
	}
	return nil
}

func (x *Define) GetDefineValues() *DefineCotaNFTValueVec {
	if x != nil {
		return x.DefineValues
	}
	return nil
}

func (x *Define) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Define) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type CotaNFTId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmtType string `protobuf:"bytes,1,opt,name=smtType,proto3" json:"smtType,omitempty"`
	CotaId  string `protobuf:"bytes,2,opt,name=cotaId,proto3" json:"cotaId,omitempty"`
	Index   uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *CotaNFTId) Reset() {
	*x = CotaNFTId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CotaNFTId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CotaNFTId) ProtoMessage() {}

func (x *CotaNFTId) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CotaNFTId.ProtoReflect.Descriptor instead.
func (*CotaNFTId) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{6}
}

func (x *CotaNFTId) GetSmtType() string {
	if x != nil {
		return x.SmtType
	}
	return ""
}

func (x *CotaNFTId) GetCotaId() string {
	if x != nil {
		return x.CotaId
	}
	return ""
}

func (x *CotaNFTId) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type WithdrawalCotaNFTKeyVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CotaNFTIds []*CotaNFTId `protobuf:"bytes,1,rep,name=cotaNFTIds,proto3" json:"cotaNFTIds,omitempty"`
}

func (x *WithdrawalCotaNFTKeyVec) Reset() {
	*x = WithdrawalCotaNFTKeyVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTKeyVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTKeyVec) ProtoMessage() {}

func (x *WithdrawalCotaNFTKeyVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTKeyVec.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTKeyVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{7}
}

func (x *WithdrawalCotaNFTKeyVec) GetCotaNFTIds() []*CotaNFTId {
	if x != nil {
		return x.CotaNFTIds
	}
	return nil
}

type WithdrawalCotaNFTKeyV1Vec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*WithdrawalCotaNFTKeyV1 `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *WithdrawalCotaNFTKeyV1Vec) Reset() {
	*x = WithdrawalCotaNFTKeyV1Vec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTKeyV1Vec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTKeyV1Vec) ProtoMessage() {}

func (x *WithdrawalCotaNFTKeyV1Vec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTKeyV1Vec.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTKeyV1Vec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{8}
}

func (x *WithdrawalCotaNFTKeyV1Vec) GetKeys() []*WithdrawalCotaNFTKeyV1 {
	if x != nil {
		return x.Keys
	}
	return nil
}

type WithdrawalCotaNFTKeyV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftIds   *CotaNFTId `protobuf:"bytes,1,opt,name=nftIds,proto3" json:"nftIds,omitempty"`
	OutPoint string     `protobuf:"bytes,2,opt,name=outPoint,proto3" json:"outPoint,omitempty"`
}

func (x *WithdrawalCotaNFTKeyV1) Reset() {
	*x = WithdrawalCotaNFTKeyV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTKeyV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTKeyV1) ProtoMessage() {}

func (x *WithdrawalCotaNFTKeyV1) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTKeyV1.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTKeyV1) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{9}
}

func (x *WithdrawalCotaNFTKeyV1) GetNftIds() *CotaNFTId {
	if x != nil {
		return x.NftIds
	}
	return nil
}

func (x *WithdrawalCotaNFTKeyV1) GetOutPoint() string {
	if x != nil {
		return x.OutPoint
	}
	return ""
}

type WithdrawalCotaNFTValueVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*WithdrawalCotaNFTValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *WithdrawalCotaNFTValueVec) Reset() {
	*x = WithdrawalCotaNFTValueVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTValueVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTValueVec) ProtoMessage() {}

func (x *WithdrawalCotaNFTValueVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTValueVec.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTValueVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{10}
}

func (x *WithdrawalCotaNFTValueVec) GetValues() []*WithdrawalCotaNFTValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type WithdrawalCotaNFTValueV1Vec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*WithdrawalCotaNFTValueV1 `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *WithdrawalCotaNFTValueV1Vec) Reset() {
	*x = WithdrawalCotaNFTValueV1Vec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTValueV1Vec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTValueV1Vec) ProtoMessage() {}

func (x *WithdrawalCotaNFTValueV1Vec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTValueV1Vec.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTValueV1Vec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawalCotaNFTValueV1Vec) GetValues() []*WithdrawalCotaNFTValueV1 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CotaNFTInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configure      uint32 `protobuf:"varint,1,opt,name=configure,proto3" json:"configure,omitempty"`
	State          uint32 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	Characteristic string `protobuf:"bytes,3,opt,name=characteristic,proto3" json:"characteristic,omitempty"`
}

func (x *CotaNFTInfo) Reset() {
	*x = CotaNFTInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CotaNFTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CotaNFTInfo) ProtoMessage() {}

func (x *CotaNFTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CotaNFTInfo.ProtoReflect.Descriptor instead.
func (*CotaNFTInfo) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{12}
}

func (x *CotaNFTInfo) GetConfigure() uint32 {
	if x != nil {
		return x.Configure
	}
	return 0
}

func (x *CotaNFTInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *CotaNFTInfo) GetCharacteristic() string {
	if x != nil {
		return x.Characteristic
	}
	return ""
}

type WithdrawalCotaNFTValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftInfo  *CotaNFTInfo `protobuf:"bytes,1,opt,name=nftInfo,proto3" json:"nftInfo,omitempty"`
	ToLock   *Script      `protobuf:"bytes,2,opt,name=toLock,proto3" json:"toLock,omitempty"`
	OutPoint string       `protobuf:"bytes,3,opt,name=outPoint,proto3" json:"outPoint,omitempty"`
}

func (x *WithdrawalCotaNFTValue) Reset() {
	*x = WithdrawalCotaNFTValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTValue) ProtoMessage() {}

func (x *WithdrawalCotaNFTValue) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTValue.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTValue) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{13}
}

func (x *WithdrawalCotaNFTValue) GetNftInfo() *CotaNFTInfo {
	if x != nil {
		return x.NftInfo
	}
	return nil
}

func (x *WithdrawalCotaNFTValue) GetToLock() *Script {
	if x != nil {
		return x.ToLock
	}
	return nil
}

func (x *WithdrawalCotaNFTValue) GetOutPoint() string {
	if x != nil {
		return x.OutPoint
	}
	return ""
}

type WithdrawalCotaNFTValueV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftInfo *CotaNFTInfo `protobuf:"bytes,1,opt,name=nftInfo,proto3" json:"nftInfo,omitempty"`
	ToLock  *Script      `protobuf:"bytes,2,opt,name=toLock,proto3" json:"toLock,omitempty"`
}

func (x *WithdrawalCotaNFTValueV1) Reset() {
	*x = WithdrawalCotaNFTValueV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalCotaNFTValueV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalCotaNFTValueV1) ProtoMessage() {}

func (x *WithdrawalCotaNFTValueV1) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawalCotaNFTValueV1.ProtoReflect.Descriptor instead.
func (*WithdrawalCotaNFTValueV1) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{14}
}

func (x *WithdrawalCotaNFTValueV1) GetNftInfo() *CotaNFTInfo {
	if x != nil {
		return x.NftInfo
	}
	return nil
}

func (x *WithdrawalCotaNFTValueV1) GetToLock() *Script {
	if x != nil {
		return x.ToLock
	}
	return nil
}

type HoldCotaNFTKeyVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CotaNFTIds []*CotaNFTId `protobuf:"bytes,1,rep,name=cotaNFTIds,proto3" json:"cotaNFTIds,omitempty"`
}

func (x *HoldCotaNFTKeyVec) Reset() {
	*x = HoldCotaNFTKeyVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldCotaNFTKeyVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldCotaNFTKeyVec) ProtoMessage() {}

func (x *HoldCotaNFTKeyVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldCotaNFTKeyVec.ProtoReflect.Descriptor instead.
func (*HoldCotaNFTKeyVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{15}
}

func (x *HoldCotaNFTKeyVec) GetCotaNFTIds() []*CotaNFTId {
	if x != nil {
		return x.CotaNFTIds
	}
	return nil
}

type HoldCotaNFTValueVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftInfos []*CotaNFTInfo `protobuf:"bytes,1,rep,name=nftInfos,proto3" json:"nftInfos,omitempty"`
}

func (x *HoldCotaNFTValueVec) Reset() {
	*x = HoldCotaNFTValueVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldCotaNFTValueVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldCotaNFTValueVec) ProtoMessage() {}

func (x *HoldCotaNFTValueVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldCotaNFTValueVec.ProtoReflect.Descriptor instead.
func (*HoldCotaNFTValueVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{16}
}

func (x *HoldCotaNFTValueVec) GetNftInfos() []*CotaNFTInfo {
	if x != nil {
		return x.NftInfos
	}
	return nil
}

type ClaimCotaNFTKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NftId    *CotaNFTId `protobuf:"bytes,1,opt,name=nftId,proto3" json:"nftId,omitempty"`
	OutPoint string     `protobuf:"bytes,2,opt,name=outPoint,proto3" json:"outPoint,omitempty"`
}

func (x *ClaimCotaNFTKey) Reset() {
	*x = ClaimCotaNFTKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimCotaNFTKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimCotaNFTKey) ProtoMessage() {}

func (x *ClaimCotaNFTKey) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimCotaNFTKey.ProtoReflect.Descriptor instead.
func (*ClaimCotaNFTKey) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{17}
}

func (x *ClaimCotaNFTKey) GetNftId() *CotaNFTId {
	if x != nil {
		return x.NftId
	}
	return nil
}

func (x *ClaimCotaNFTKey) GetOutPoint() string {
	if x != nil {
		return x.OutPoint
	}
	return ""
}

type ClaimCotaNFTKeyVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*ClaimCotaNFTKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ClaimCotaNFTKeyVec) Reset() {
	*x = ClaimCotaNFTKeyVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimCotaNFTKeyVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimCotaNFTKeyVec) ProtoMessage() {}

func (x *ClaimCotaNFTKeyVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimCotaNFTKeyVec.ProtoReflect.Descriptor instead.
func (*ClaimCotaNFTKeyVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{18}
}

func (x *ClaimCotaNFTKeyVec) GetKeys() []*ClaimCotaNFTKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type ClaimCotaNFTValueVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ClaimCotaNFTValueVec) Reset() {
	*x = ClaimCotaNFTValueVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimCotaNFTValueVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimCotaNFTValueVec) ProtoMessage() {}

func (x *ClaimCotaNFTValueVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimCotaNFTValueVec.ProtoReflect.Descriptor instead.
func (*ClaimCotaNFTValueVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{19}
}

func (x *ClaimCotaNFTValueVec) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ClaimCotaNFTInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string       `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	NftInfo *CotaNFTInfo `protobuf:"bytes,2,opt,name=nftInfo,proto3" json:"nftInfo,omitempty"`
}

func (x *ClaimCotaNFTInfo) Reset() {
	*x = ClaimCotaNFTInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimCotaNFTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimCotaNFTInfo) ProtoMessage() {}

func (x *ClaimCotaNFTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimCotaNFTInfo.ProtoReflect.Descriptor instead.
func (*ClaimCotaNFTInfo) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{20}
}

func (x *ClaimCotaNFTInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClaimCotaNFTInfo) GetNftInfo() *CotaNFTInfo {
	if x != nil {
		return x.NftInfo
	}
	return nil
}

type ClaimCotaNFTInfoVec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ClaimCotaNFTInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *ClaimCotaNFTInfoVec) Reset() {
	*x = ClaimCotaNFTInfoVec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimCotaNFTInfoVec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimCotaNFTInfoVec) ProtoMessage() {}

func (x *ClaimCotaNFTInfoVec) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimCotaNFTInfoVec.ProtoReflect.Descriptor instead.
func (*ClaimCotaNFTInfoVec) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{21}
}

func (x *ClaimCotaNFTInfoVec) GetInfos() []*ClaimCotaNFTInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type Mint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefineKeys      *DefineCotaNFTKeyVec   `protobuf:"bytes,1,opt,name=defineKeys,proto3" json:"defineKeys,omitempty"`
	DefineOldValues *DefineCotaNFTValueVec `protobuf:"bytes,2,opt,name=defineOldValues,proto3" json:"defineOldValues,omitempty"`
	DefineNewValues *DefineCotaNFTValueVec `protobuf:"bytes,3,opt,name=defineNewValues,proto3" json:"defineNewValues,omitempty"`
	// Types that are assignable to WithdrawalKeys:
	//	*Mint_V0Keys
	//	*Mint_V1Keys
	WithdrawalKeys isMint_WithdrawalKeys `protobuf_oneof:"withdrawalKeys"`
	// Types that are assignable to WithdrawValues:
	//	*Mint_V0Values
	//	*Mint_V1Values
	WithdrawValues isMint_WithdrawValues `protobuf_oneof:"withdrawValues"`
	Proof          string                `protobuf:"bytes,8,opt,name=proof,proto3" json:"proof,omitempty"`
	Action         string                `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Mint) Reset() {
	*x = Mint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mint) ProtoMessage() {}

func (x *Mint) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mint.ProtoReflect.Descriptor instead.
func (*Mint) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{22}
}

func (x *Mint) GetDefineKeys() *DefineCotaNFTKeyVec {
	if x != nil {
		return x.DefineKeys
	}
	return nil
}

func (x *Mint) GetDefineOldValues() *DefineCotaNFTValueVec {
	if x != nil {
		return x.DefineOldValues
	}
	return nil
}

func (x *Mint) GetDefineNewValues() *DefineCotaNFTValueVec {
	if x != nil {
		return x.DefineNewValues
	}
	return nil
}

func (m *Mint) GetWithdrawalKeys() isMint_WithdrawalKeys {
	if m != nil {
		return m.WithdrawalKeys
	}
	return nil
}

func (x *Mint) GetV0Keys() *WithdrawalCotaNFTKeyVec {
	if x, ok := x.GetWithdrawalKeys().(*Mint_V0Keys); ok {
		return x.V0Keys
	}
	return nil
}

func (x *Mint) GetV1Keys() *WithdrawalCotaNFTKeyV1Vec {
	if x, ok := x.GetWithdrawalKeys().(*Mint_V1Keys); ok {
		return x.V1Keys
	}
	return nil
}

func (m *Mint) GetWithdrawValues() isMint_WithdrawValues {
	if m != nil {
		return m.WithdrawValues
	}
	return nil
}

func (x *Mint) GetV0Values() *WithdrawalCotaNFTValueVec {
	if x, ok := x.GetWithdrawValues().(*Mint_V0Values); ok {
		return x.V0Values
	}
	return nil
}

func (x *Mint) GetV1Values() *WithdrawalCotaNFTValueV1Vec {
	if x, ok := x.GetWithdrawValues().(*Mint_V1Values); ok {
		return x.V1Values
	}
	return nil
}

func (x *Mint) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Mint) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type isMint_WithdrawalKeys interface {
	isMint_WithdrawalKeys()
}

type Mint_V0Keys struct {
	V0Keys *WithdrawalCotaNFTKeyVec `protobuf:"bytes,4,opt,name=v0Keys,proto3,oneof"`
}

type Mint_V1Keys struct {
	V1Keys *WithdrawalCotaNFTKeyV1Vec `protobuf:"bytes,5,opt,name=v1Keys,proto3,oneof"`
}

func (*Mint_V0Keys) isMint_WithdrawalKeys() {}

func (*Mint_V1Keys) isMint_WithdrawalKeys() {}

type isMint_WithdrawValues interface {
	isMint_WithdrawValues()
}

type Mint_V0Values struct {
	V0Values *WithdrawalCotaNFTValueVec `protobuf:"bytes,6,opt,name=v0Values,proto3,oneof"`
}

type Mint_V1Values struct {
	V1Values *WithdrawalCotaNFTValueV1Vec `protobuf:"bytes,7,opt,name=v1Values,proto3,oneof"`
}

func (*Mint_V0Values) isMint_WithdrawValues() {}

func (*Mint_V1Values) isMint_WithdrawValues() {}

type Withdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldKeys   *HoldCotaNFTKeyVec   `protobuf:"bytes,1,opt,name=holdKeys,proto3" json:"holdKeys,omitempty"`
	HoldValues *HoldCotaNFTValueVec `protobuf:"bytes,2,opt,name=holdValues,proto3" json:"holdValues,omitempty"`
	// Types that are assignable to WithdrawalKeys:
	//	*Withdraw_V0Keys
	//	*Withdraw_V1Keys
	WithdrawalKeys isWithdraw_WithdrawalKeys `protobuf_oneof:"withdrawalKeys"`
	// Types that are assignable to WithdrawValues:
	//	*Withdraw_V0Values
	//	*Withdraw_V1Values
	WithdrawValues isWithdraw_WithdrawValues `protobuf_oneof:"withdrawValues"`
	Proof          string                    `protobuf:"bytes,8,opt,name=proof,proto3" json:"proof,omitempty"`
	Action         string                    `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Withdraw) Reset() {
	*x = Withdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdraw) ProtoMessage() {}

func (x *Withdraw) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdraw.ProtoReflect.Descriptor instead.
func (*Withdraw) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{23}
}

func (x *Withdraw) GetHoldKeys() *HoldCotaNFTKeyVec {
	if x != nil {
		return x.HoldKeys
	}
	return nil
}

func (x *Withdraw) GetHoldValues() *HoldCotaNFTValueVec {
	if x != nil {
		return x.HoldValues
	}
	return nil
}

func (m *Withdraw) GetWithdrawalKeys() isWithdraw_WithdrawalKeys {
	if m != nil {
		return m.WithdrawalKeys
	}
	return nil
}

func (x *Withdraw) GetV0Keys() *WithdrawalCotaNFTValueVec {
	if x, ok := x.GetWithdrawalKeys().(*Withdraw_V0Keys); ok {
		return x.V0Keys
	}
	return nil
}

func (x *Withdraw) GetV1Keys() *WithdrawalCotaNFTValueV1Vec {
	if x, ok := x.GetWithdrawalKeys().(*Withdraw_V1Keys); ok {
		return x.V1Keys
	}
	return nil
}

func (m *Withdraw) GetWithdrawValues() isWithdraw_WithdrawValues {
	if m != nil {
		return m.WithdrawValues
	}
	return nil
}

func (x *Withdraw) GetV0Values() *WithdrawalCotaNFTValueVec {
	if x, ok := x.GetWithdrawValues().(*Withdraw_V0Values); ok {
		return x.V0Values
	}
	return nil
}

func (x *Withdraw) GetV1Values() *WithdrawalCotaNFTValueV1Vec {
	if x, ok := x.GetWithdrawValues().(*Withdraw_V1Values); ok {
		return x.V1Values
	}
	return nil
}

func (x *Withdraw) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Withdraw) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type isWithdraw_WithdrawalKeys interface {
	isWithdraw_WithdrawalKeys()
}

type Withdraw_V0Keys struct {
	V0Keys *WithdrawalCotaNFTValueVec `protobuf:"bytes,3,opt,name=v0Keys,proto3,oneof"`
}

type Withdraw_V1Keys struct {
	V1Keys *WithdrawalCotaNFTValueV1Vec `protobuf:"bytes,4,opt,name=v1Keys,proto3,oneof"`
}

func (*Withdraw_V0Keys) isWithdraw_WithdrawalKeys() {}

func (*Withdraw_V1Keys) isWithdraw_WithdrawalKeys() {}

type isWithdraw_WithdrawValues interface {
	isWithdraw_WithdrawValues()
}

type Withdraw_V0Values struct {
	V0Values *WithdrawalCotaNFTValueVec `protobuf:"bytes,5,opt,name=v0Values,proto3,oneof"`
}

type Withdraw_V1Values struct {
	V1Values *WithdrawalCotaNFTValueV1Vec `protobuf:"bytes,6,opt,name=v1Values,proto3,oneof"`
}

func (*Withdraw_V0Values) isWithdraw_WithdrawValues() {}

func (*Withdraw_V1Values) isWithdraw_WithdrawValues() {}

type Claim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldKeys        *HoldCotaNFTKeyVec    `protobuf:"bytes,1,opt,name=holdKeys,proto3" json:"holdKeys,omitempty"`
	HoldValues      *HoldCotaNFTValueVec  `protobuf:"bytes,2,opt,name=holdValues,proto3" json:"holdValues,omitempty"`
	ClaimKeys       *ClaimCotaNFTKeyVec   `protobuf:"bytes,3,opt,name=claimKeys,proto3" json:"claimKeys,omitempty"`
	ClaimValues     *ClaimCotaNFTValueVec `protobuf:"bytes,4,opt,name=claimValues,proto3" json:"claimValues,omitempty"`
	Proof           string                `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	WithdrawalProof string                `protobuf:"bytes,6,opt,name=withdrawalProof,proto3" json:"withdrawalProof,omitempty"`
	Action          string                `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Claim) Reset() {
	*x = Claim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Claim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Claim) ProtoMessage() {}

func (x *Claim) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Claim.ProtoReflect.Descriptor instead.
func (*Claim) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{24}
}

func (x *Claim) GetHoldKeys() *HoldCotaNFTKeyVec {
	if x != nil {
		return x.HoldKeys
	}
	return nil
}

func (x *Claim) GetHoldValues() *HoldCotaNFTValueVec {
	if x != nil {
		return x.HoldValues
	}
	return nil
}

func (x *Claim) GetClaimKeys() *ClaimCotaNFTKeyVec {
	if x != nil {
		return x.ClaimKeys
	}
	return nil
}

func (x *Claim) GetClaimValues() *ClaimCotaNFTValueVec {
	if x != nil {
		return x.ClaimValues
	}
	return nil
}

func (x *Claim) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Claim) GetWithdrawalProof() string {
	if x != nil {
		return x.WithdrawalProof
	}
	return ""
}

func (x *Claim) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldKeys      *HoldCotaNFTKeyVec   `protobuf:"bytes,1,opt,name=holdKeys,proto3" json:"holdKeys,omitempty"`
	HoldOldValues *HoldCotaNFTValueVec `protobuf:"bytes,2,opt,name=holdOldValues,proto3" json:"holdOldValues,omitempty"`
	HoldNewValues *HoldCotaNFTValueVec `protobuf:"bytes,3,opt,name=holdNewValues,proto3" json:"holdNewValues,omitempty"`
	Proof         string               `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
	Action        string               `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{25}
}

func (x *Update) GetHoldKeys() *HoldCotaNFTKeyVec {
	if x != nil {
		return x.HoldKeys
	}
	return nil
}

func (x *Update) GetHoldOldValues() *HoldCotaNFTValueVec {
	if x != nil {
		return x.HoldOldValues
	}
	return nil
}

func (x *Update) GetHoldNewValues() *HoldCotaNFTValueVec {
	if x != nil {
		return x.HoldNewValues
	}
	return nil
}

func (x *Update) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Update) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimKeys   *ClaimCotaNFTKeyVec   `protobuf:"bytes,1,opt,name=claimKeys,proto3" json:"claimKeys,omitempty"`
	ClaimValues *ClaimCotaNFTValueVec `protobuf:"bytes,2,opt,name=claimValues,proto3" json:"claimValues,omitempty"`
	// Types that are assignable to WithdrawalKeys:
	//	*Transfer_V0Keys
	//	*Transfer_V1Keys
	WithdrawalKeys isTransfer_WithdrawalKeys `protobuf_oneof:"withdrawalKeys"`
	// Types that are assignable to WithdrawValues:
	//	*Transfer_V0Values
	//	*Transfer_V1Values
	WithdrawValues  isTransfer_WithdrawValues `protobuf_oneof:"withdrawValues"`
	Proof           string                    `protobuf:"bytes,7,opt,name=proof,proto3" json:"proof,omitempty"`
	WithdrawalProof string                    `protobuf:"bytes,8,opt,name=withdrawalProof,proto3" json:"withdrawalProof,omitempty"`
	Action          string                    `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{26}
}

func (x *Transfer) GetClaimKeys() *ClaimCotaNFTKeyVec {
	if x != nil {
		return x.ClaimKeys
	}
	return nil
}

func (x *Transfer) GetClaimValues() *ClaimCotaNFTValueVec {
	if x != nil {
		return x.ClaimValues
	}
	return nil
}

func (m *Transfer) GetWithdrawalKeys() isTransfer_WithdrawalKeys {
	if m != nil {
		return m.WithdrawalKeys
	}
	return nil
}

func (x *Transfer) GetV0Keys() *WithdrawalCotaNFTKeyVec {
	if x, ok := x.GetWithdrawalKeys().(*Transfer_V0Keys); ok {
		return x.V0Keys
	}
	return nil
}

func (x *Transfer) GetV1Keys() *WithdrawalCotaNFTKeyV1Vec {
	if x, ok := x.GetWithdrawalKeys().(*Transfer_V1Keys); ok {
		return x.V1Keys
	}
	return nil
}

func (m *Transfer) GetWithdrawValues() isTransfer_WithdrawValues {
	if m != nil {
		return m.WithdrawValues
	}
	return nil
}

func (x *Transfer) GetV0Values() *WithdrawalCotaNFTValue {
	if x, ok := x.GetWithdrawValues().(*Transfer_V0Values); ok {
		return x.V0Values
	}
	return nil
}

func (x *Transfer) GetV1Values() *WithdrawalCotaNFTValueV1 {
	if x, ok := x.GetWithdrawValues().(*Transfer_V1Values); ok {
		return x.V1Values
	}
	return nil
}

func (x *Transfer) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *Transfer) GetWithdrawalProof() string {
	if x != nil {
		return x.WithdrawalProof
	}
	return ""
}

func (x *Transfer) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type isTransfer_WithdrawalKeys interface {
	isTransfer_WithdrawalKeys()
}

type Transfer_V0Keys struct {
	V0Keys *WithdrawalCotaNFTKeyVec `protobuf:"bytes,3,opt,name=v0Keys,proto3,oneof"`
}

type Transfer_V1Keys struct {
	V1Keys *WithdrawalCotaNFTKeyV1Vec `protobuf:"bytes,4,opt,name=v1Keys,proto3,oneof"`
}

func (*Transfer_V0Keys) isTransfer_WithdrawalKeys() {}

func (*Transfer_V1Keys) isTransfer_WithdrawalKeys() {}

type isTransfer_WithdrawValues interface {
	isTransfer_WithdrawValues()
}

type Transfer_V0Values struct {
	V0Values *WithdrawalCotaNFTValue `protobuf:"bytes,5,opt,name=v0Values,proto3,oneof"`
}

type Transfer_V1Values struct {
	V1Values *WithdrawalCotaNFTValueV1 `protobuf:"bytes,6,opt,name=v1Values,proto3,oneof"`
}

func (*Transfer_V0Values) isTransfer_WithdrawValues() {}

func (*Transfer_V1Values) isTransfer_WithdrawValues() {}

type ClaimAndUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldKeys        *HoldCotaNFTKeyVec   `protobuf:"bytes,1,opt,name=holdKeys,proto3" json:"holdKeys,omitempty"`
	HoldValues      *HoldCotaNFTValueVec `protobuf:"bytes,2,opt,name=holdValues,proto3" json:"holdValues,omitempty"`
	ClaimKeys       *ClaimCotaNFTKeyVec  `protobuf:"bytes,3,opt,name=claimKeys,proto3" json:"claimKeys,omitempty"`
	ClaimInfos      *ClaimCotaNFTInfoVec `protobuf:"bytes,4,opt,name=claim_infos,json=claimInfos,proto3" json:"claim_infos,omitempty"`
	Proof           string               `protobuf:"bytes,5,opt,name=proof,proto3" json:"proof,omitempty"`
	WithdrawalProof string               `protobuf:"bytes,6,opt,name=withdrawalProof,proto3" json:"withdrawalProof,omitempty"`
	Action          string               `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ClaimAndUpdate) Reset() {
	*x = ClaimAndUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimAndUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimAndUpdate) ProtoMessage() {}

func (x *ClaimAndUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimAndUpdate.ProtoReflect.Descriptor instead.
func (*ClaimAndUpdate) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{27}
}

func (x *ClaimAndUpdate) GetHoldKeys() *HoldCotaNFTKeyVec {
	if x != nil {
		return x.HoldKeys
	}
	return nil
}

func (x *ClaimAndUpdate) GetHoldValues() *HoldCotaNFTValueVec {
	if x != nil {
		return x.HoldValues
	}
	return nil
}

func (x *ClaimAndUpdate) GetClaimKeys() *ClaimCotaNFTKeyVec {
	if x != nil {
		return x.ClaimKeys
	}
	return nil
}

func (x *ClaimAndUpdate) GetClaimInfos() *ClaimCotaNFTInfoVec {
	if x != nil {
		return x.ClaimInfos
	}
	return nil
}

func (x *ClaimAndUpdate) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *ClaimAndUpdate) GetWithdrawalProof() string {
	if x != nil {
		return x.WithdrawalProof
	}
	return ""
}

func (x *ClaimAndUpdate) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type TransferAndUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClaimKeys  *ClaimCotaNFTKeyVec  `protobuf:"bytes,1,opt,name=claimKeys,proto3" json:"claimKeys,omitempty"`
	ClaimInfos *ClaimCotaNFTInfoVec `protobuf:"bytes,2,opt,name=claim_infos,json=claimInfos,proto3" json:"claim_infos,omitempty"`
	// Types that are assignable to WithdrawalKeys:
	//	*TransferAndUpdate_V0Keys
	//	*TransferAndUpdate_V1Keys
	WithdrawalKeys isTransferAndUpdate_WithdrawalKeys `protobuf_oneof:"withdrawalKeys"`
	// Types that are assignable to WithdrawValues:
	//	*TransferAndUpdate_V0Values
	//	*TransferAndUpdate_V1Values
	WithdrawValues  isTransferAndUpdate_WithdrawValues `protobuf_oneof:"withdrawValues"`
	Proof           string                             `protobuf:"bytes,7,opt,name=proof,proto3" json:"proof,omitempty"`
	WithdrawalProof string                             `protobuf:"bytes,8,opt,name=withdrawalProof,proto3" json:"withdrawalProof,omitempty"`
	Action          string                             `protobuf:"bytes,9,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *TransferAndUpdate) Reset() {
	*x = TransferAndUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cotaparser_v1_entry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferAndUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferAndUpdate) ProtoMessage() {}

func (x *TransferAndUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_cotaparser_v1_entry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferAndUpdate.ProtoReflect.Descriptor instead.
func (*TransferAndUpdate) Descriptor() ([]byte, []int) {
	return file_api_cotaparser_v1_entry_proto_rawDescGZIP(), []int{28}
}

func (x *TransferAndUpdate) GetClaimKeys() *ClaimCotaNFTKeyVec {
	if x != nil {
		return x.ClaimKeys
	}
	return nil
}

func (x *TransferAndUpdate) GetClaimInfos() *ClaimCotaNFTInfoVec {
	if x != nil {
		return x.ClaimInfos
	}
	return nil
}

func (m *TransferAndUpdate) GetWithdrawalKeys() isTransferAndUpdate_WithdrawalKeys {
	if m != nil {
		return m.WithdrawalKeys
	}
	return nil
}

func (x *TransferAndUpdate) GetV0Keys() *WithdrawalCotaNFTKeyVec {
	if x, ok := x.GetWithdrawalKeys().(*TransferAndUpdate_V0Keys); ok {
		return x.V0Keys
	}
	return nil
}

func (x *TransferAndUpdate) GetV1Keys() *WithdrawalCotaNFTKeyV1Vec {
	if x, ok := x.GetWithdrawalKeys().(*TransferAndUpdate_V1Keys); ok {
		return x.V1Keys
	}
	return nil
}

func (m *TransferAndUpdate) GetWithdrawValues() isTransferAndUpdate_WithdrawValues {
	if m != nil {
		return m.WithdrawValues
	}
	return nil
}

func (x *TransferAndUpdate) GetV0Values() *WithdrawalCotaNFTValue {
	if x, ok := x.GetWithdrawValues().(*TransferAndUpdate_V0Values); ok {
		return x.V0Values
	}
	return nil
}

func (x *TransferAndUpdate) GetV1Values() *WithdrawalCotaNFTValueV1 {
	if x, ok := x.GetWithdrawValues().(*TransferAndUpdate_V1Values); ok {
		return x.V1Values
	}
	return nil
}

func (x *TransferAndUpdate) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *TransferAndUpdate) GetWithdrawalProof() string {
	if x != nil {
		return x.WithdrawalProof
	}
	return ""
}

func (x *TransferAndUpdate) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

type isTransferAndUpdate_WithdrawalKeys interface {
	isTransferAndUpdate_WithdrawalKeys()
}

type TransferAndUpdate_V0Keys struct {
	V0Keys *WithdrawalCotaNFTKeyVec `protobuf:"bytes,3,opt,name=v0Keys,proto3,oneof"`
}

type TransferAndUpdate_V1Keys struct {
	V1Keys *WithdrawalCotaNFTKeyV1Vec `protobuf:"bytes,4,opt,name=v1Keys,proto3,oneof"`
}

func (*TransferAndUpdate_V0Keys) isTransferAndUpdate_WithdrawalKeys() {}

func (*TransferAndUpdate_V1Keys) isTransferAndUpdate_WithdrawalKeys() {}

type isTransferAndUpdate_WithdrawValues interface {
	isTransferAndUpdate_WithdrawValues()
}

type TransferAndUpdate_V0Values struct {
	V0Values *WithdrawalCotaNFTValue `protobuf:"bytes,5,opt,name=v0Values,proto3,oneof"`
}

type TransferAndUpdate_V1Values struct {
	V1Values *WithdrawalCotaNFTValueV1 `protobuf:"bytes,6,opt,name=v1Values,proto3,oneof"`
}

func (*TransferAndUpdate_V0Values) isTransferAndUpdate_WithdrawValues() {}

func (*TransferAndUpdate_V1Values) isTransferAndUpdate_WithdrawValues() {}

var File_api_cotaparser_v1_entry_proto protoreflect.FileDescriptor

var file_api_cotaparser_v1_entry_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x22, 0x54, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x22, 0x60, 0x0a,
	0x12, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x22,
	0x4d, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x56,
	0x0a, 0x15, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x52, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46,
	0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x09, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x74, 0x61, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x74, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x57, 0x0a, 0x17, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b,
	0x65, 0x79, 0x56, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x74, 0x61,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x52, 0x0a, 0x63, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x31, 0x56, 0x65, 0x63,
	0x12, 0x3d, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74,
	0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x31, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x6a, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74,
	0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x31, 0x12, 0x34, 0x0a, 0x06, 0x6e, 0x66, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x74, 0x61,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x52, 0x06, 0x6e, 0x66, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x19, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x1b, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x56, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x74,
	0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x69, 0x0a, 0x0b, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x74, 0x61, 0x4e,
	0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x06, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x74, 0x6f, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x87,
	0x01, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74,
	0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x12, 0x38, 0x0a, 0x07, 0x6e,
	0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6e, 0x66,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x06, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x22, 0x51, 0x0a, 0x11, 0x48, 0x6f, 0x6c, 0x64,
	0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x12, 0x3c, 0x0a,
	0x0a, 0x63, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x52,
	0x0a, 0x63, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56,
	0x65, 0x63, 0x12, 0x3a, 0x0a, 0x08, 0x6e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x61,
	0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x05, 0x6e, 0x66, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x64, 0x52, 0x05,
	0x6e, 0x66, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0x4c, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46,
	0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43,
	0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22,
	0x2e, 0x0a, 0x14, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x66, 0x0a, 0x10, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x07, 0x6e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6e, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x63, 0x12, 0x39,
	0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xf0, 0x04, 0x0a, 0x04, 0x4d, 0x69,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65,
	0x63, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x48, 0x00,
	0x52, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x76, 0x31, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65,
	0x79, 0x56, 0x31, 0x56, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x76, 0x31, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x4a, 0x0a, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63,
	0x48, 0x01, 0x52, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x08,
	0x76, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74,
	0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x56, 0x65, 0x63, 0x48, 0x01,
	0x52, 0x08, 0x76, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x92, 0x04, 0x0a,
	0x08, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x40, 0x0a, 0x08, 0x68, 0x6f, 0x6c,
	0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65,
	0x63, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x68,
	0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65,
	0x63, 0x48, 0x00, 0x52, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x76,
	0x31, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46,
	0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x56, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x76,
	0x31, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x56, 0x65, 0x63, 0x48, 0x01, 0x52, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x08, 0x76, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31,
	0x56, 0x65, 0x63, 0x48, 0x01, 0x52, 0x08, 0x76, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42,
	0x10, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xf9, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x40, 0x0a, 0x08, 0x68,
	0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79,
	0x56, 0x65, 0x63, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a,
	0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46,
	0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65,
	0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x02,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x74,
	0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63,
	0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x68, 0x6f,
	0x6c, 0x64, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46,
	0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x4f,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64,
	0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x04, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f,
	0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x52, 0x09, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x56, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x76, 0x31, 0x4b, 0x65, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79,
	0x56, 0x31, 0x56, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x76, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x47, 0x0a, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x01, 0x52, 0x08,
	0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x76, 0x31, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x74,
	0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x48, 0x01, 0x52, 0x08, 0x76, 0x31, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x80, 0x03, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x41, 0x6e, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x74,
	0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c,
	0x64, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x63,
	0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54,
	0x4b, 0x65, 0x79, 0x56, 0x65, 0x63, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x47, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x63, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xbf, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x63, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a,
	0x0b, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x74, 0x61,
	0x4e, 0x46, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x56, 0x65, 0x63, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x76, 0x30, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x46, 0x0a, 0x06,
	0x76, 0x31, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e,
	0x46, 0x54, 0x4b, 0x65, 0x79, 0x56, 0x31, 0x56, 0x65, 0x63, 0x48, 0x00, 0x52, 0x06, 0x76, 0x31,
	0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x01, 0x52, 0x08, 0x76, 0x30, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x08, 0x76, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f,
	0x74, 0x61, 0x4e, 0x46, 0x54, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x31, 0x48, 0x01, 0x52, 0x08,
	0x76, 0x31, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x28,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4b, 0x65,
	0x79, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x42, 0x18, 0x5a, 0x16, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x74, 0x61, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_cotaparser_v1_entry_proto_rawDescOnce sync.Once
	file_api_cotaparser_v1_entry_proto_rawDescData = file_api_cotaparser_v1_entry_proto_rawDesc
)

func file_api_cotaparser_v1_entry_proto_rawDescGZIP() []byte {
	file_api_cotaparser_v1_entry_proto_rawDescOnce.Do(func() {
		file_api_cotaparser_v1_entry_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cotaparser_v1_entry_proto_rawDescData)
	})
	return file_api_cotaparser_v1_entry_proto_rawDescData
}

var file_api_cotaparser_v1_entry_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_api_cotaparser_v1_entry_proto_goTypes = []interface{}{
	(*Script)(nil),                      // 0: cotaparser.api.v1.Script
	(*DefineCotaNFTId)(nil),             // 1: cotaparser.api.v1.DefineCotaNFTId
	(*DefineCotaNFTValue)(nil),          // 2: cotaparser.api.v1.DefineCotaNFTValue
	(*DefineCotaNFTKeyVec)(nil),         // 3: cotaparser.api.v1.DefineCotaNFTKeyVec
	(*DefineCotaNFTValueVec)(nil),       // 4: cotaparser.api.v1.DefineCotaNFTValueVec
	(*Define)(nil),                      // 5: cotaparser.api.v1.Define
	(*CotaNFTId)(nil),                   // 6: cotaparser.api.v1.CotaNFTId
	(*WithdrawalCotaNFTKeyVec)(nil),     // 7: cotaparser.api.v1.WithdrawalCotaNFTKeyVec
	(*WithdrawalCotaNFTKeyV1Vec)(nil),   // 8: cotaparser.api.v1.WithdrawalCotaNFTKeyV1Vec
	(*WithdrawalCotaNFTKeyV1)(nil),      // 9: cotaparser.api.v1.WithdrawalCotaNFTKeyV1
	(*WithdrawalCotaNFTValueVec)(nil),   // 10: cotaparser.api.v1.WithdrawalCotaNFTValueVec
	(*WithdrawalCotaNFTValueV1Vec)(nil), // 11: cotaparser.api.v1.WithdrawalCotaNFTValueV1Vec
	(*CotaNFTInfo)(nil),                 // 12: cotaparser.api.v1.CotaNFTInfo
	(*WithdrawalCotaNFTValue)(nil),      // 13: cotaparser.api.v1.WithdrawalCotaNFTValue
	(*WithdrawalCotaNFTValueV1)(nil),    // 14: cotaparser.api.v1.WithdrawalCotaNFTValueV1
	(*HoldCotaNFTKeyVec)(nil),           // 15: cotaparser.api.v1.HoldCotaNFTKeyVec
	(*HoldCotaNFTValueVec)(nil),         // 16: cotaparser.api.v1.HoldCotaNFTValueVec
	(*ClaimCotaNFTKey)(nil),             // 17: cotaparser.api.v1.ClaimCotaNFTKey
	(*ClaimCotaNFTKeyVec)(nil),          // 18: cotaparser.api.v1.ClaimCotaNFTKeyVec
	(*ClaimCotaNFTValueVec)(nil),        // 19: cotaparser.api.v1.ClaimCotaNFTValueVec
	(*ClaimCotaNFTInfo)(nil),            // 20: cotaparser.api.v1.ClaimCotaNFTInfo
	(*ClaimCotaNFTInfoVec)(nil),         // 21: cotaparser.api.v1.ClaimCotaNFTInfoVec
	(*Mint)(nil),                        // 22: cotaparser.api.v1.Mint
	(*Withdraw)(nil),                    // 23: cotaparser.api.v1.Withdraw
	(*Claim)(nil),                       // 24: cotaparser.api.v1.Claim
	(*Update)(nil),                      // 25: cotaparser.api.v1.Update
	(*Transfer)(nil),                    // 26: cotaparser.api.v1.Transfer
	(*ClaimAndUpdate)(nil),              // 27: cotaparser.api.v1.ClaimAndUpdate
	(*TransferAndUpdate)(nil),           // 28: cotaparser.api.v1.TransferAndUpdate
}
var file_api_cotaparser_v1_entry_proto_depIdxs = []int32{
	1,  // 0: cotaparser.api.v1.DefineCotaNFTKeyVec.keys:type_name -> cotaparser.api.v1.DefineCotaNFTId
	2,  // 1: cotaparser.api.v1.DefineCotaNFTValueVec.values:type_name -> cotaparser.api.v1.DefineCotaNFTValue
	3,  // 2: cotaparser.api.v1.Define.defineKeys:type_name -> cotaparser.api.v1.DefineCotaNFTKeyVec
	4,  // 3: cotaparser.api.v1.Define.defineValues:type_name -> cotaparser.api.v1.DefineCotaNFTValueVec
	6,  // 4: cotaparser.api.v1.WithdrawalCotaNFTKeyVec.cotaNFTIds:type_name -> cotaparser.api.v1.CotaNFTId
	9,  // 5: cotaparser.api.v1.WithdrawalCotaNFTKeyV1Vec.keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyV1
	6,  // 6: cotaparser.api.v1.WithdrawalCotaNFTKeyV1.nftIds:type_name -> cotaparser.api.v1.CotaNFTId
	13, // 7: cotaparser.api.v1.WithdrawalCotaNFTValueVec.values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValue
	14, // 8: cotaparser.api.v1.WithdrawalCotaNFTValueV1Vec.values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueV1
	12, // 9: cotaparser.api.v1.WithdrawalCotaNFTValue.nftInfo:type_name -> cotaparser.api.v1.CotaNFTInfo
	0,  // 10: cotaparser.api.v1.WithdrawalCotaNFTValue.toLock:type_name -> cotaparser.api.v1.Script
	12, // 11: cotaparser.api.v1.WithdrawalCotaNFTValueV1.nftInfo:type_name -> cotaparser.api.v1.CotaNFTInfo
	0,  // 12: cotaparser.api.v1.WithdrawalCotaNFTValueV1.toLock:type_name -> cotaparser.api.v1.Script
	6,  // 13: cotaparser.api.v1.HoldCotaNFTKeyVec.cotaNFTIds:type_name -> cotaparser.api.v1.CotaNFTId
	12, // 14: cotaparser.api.v1.HoldCotaNFTValueVec.nftInfos:type_name -> cotaparser.api.v1.CotaNFTInfo
	6,  // 15: cotaparser.api.v1.ClaimCotaNFTKey.nftId:type_name -> cotaparser.api.v1.CotaNFTId
	17, // 16: cotaparser.api.v1.ClaimCotaNFTKeyVec.keys:type_name -> cotaparser.api.v1.ClaimCotaNFTKey
	12, // 17: cotaparser.api.v1.ClaimCotaNFTInfo.nftInfo:type_name -> cotaparser.api.v1.CotaNFTInfo
	20, // 18: cotaparser.api.v1.ClaimCotaNFTInfoVec.infos:type_name -> cotaparser.api.v1.ClaimCotaNFTInfo
	3,  // 19: cotaparser.api.v1.Mint.defineKeys:type_name -> cotaparser.api.v1.DefineCotaNFTKeyVec
	4,  // 20: cotaparser.api.v1.Mint.defineOldValues:type_name -> cotaparser.api.v1.DefineCotaNFTValueVec
	4,  // 21: cotaparser.api.v1.Mint.defineNewValues:type_name -> cotaparser.api.v1.DefineCotaNFTValueVec
	7,  // 22: cotaparser.api.v1.Mint.v0Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyVec
	8,  // 23: cotaparser.api.v1.Mint.v1Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyV1Vec
	10, // 24: cotaparser.api.v1.Mint.v0Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueVec
	11, // 25: cotaparser.api.v1.Mint.v1Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueV1Vec
	15, // 26: cotaparser.api.v1.Withdraw.holdKeys:type_name -> cotaparser.api.v1.HoldCotaNFTKeyVec
	16, // 27: cotaparser.api.v1.Withdraw.holdValues:type_name -> cotaparser.api.v1.HoldCotaNFTValueVec
	10, // 28: cotaparser.api.v1.Withdraw.v0Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueVec
	11, // 29: cotaparser.api.v1.Withdraw.v1Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueV1Vec
	10, // 30: cotaparser.api.v1.Withdraw.v0Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueVec
	11, // 31: cotaparser.api.v1.Withdraw.v1Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueV1Vec
	15, // 32: cotaparser.api.v1.Claim.holdKeys:type_name -> cotaparser.api.v1.HoldCotaNFTKeyVec
	16, // 33: cotaparser.api.v1.Claim.holdValues:type_name -> cotaparser.api.v1.HoldCotaNFTValueVec
	18, // 34: cotaparser.api.v1.Claim.claimKeys:type_name -> cotaparser.api.v1.ClaimCotaNFTKeyVec
	19, // 35: cotaparser.api.v1.Claim.claimValues:type_name -> cotaparser.api.v1.ClaimCotaNFTValueVec
	15, // 36: cotaparser.api.v1.Update.holdKeys:type_name -> cotaparser.api.v1.HoldCotaNFTKeyVec
	16, // 37: cotaparser.api.v1.Update.holdOldValues:type_name -> cotaparser.api.v1.HoldCotaNFTValueVec
	16, // 38: cotaparser.api.v1.Update.holdNewValues:type_name -> cotaparser.api.v1.HoldCotaNFTValueVec
	18, // 39: cotaparser.api.v1.Transfer.claimKeys:type_name -> cotaparser.api.v1.ClaimCotaNFTKeyVec
	19, // 40: cotaparser.api.v1.Transfer.claimValues:type_name -> cotaparser.api.v1.ClaimCotaNFTValueVec
	7,  // 41: cotaparser.api.v1.Transfer.v0Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyVec
	8,  // 42: cotaparser.api.v1.Transfer.v1Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyV1Vec
	13, // 43: cotaparser.api.v1.Transfer.v0Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValue
	14, // 44: cotaparser.api.v1.Transfer.v1Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueV1
	15, // 45: cotaparser.api.v1.ClaimAndUpdate.holdKeys:type_name -> cotaparser.api.v1.HoldCotaNFTKeyVec
	16, // 46: cotaparser.api.v1.ClaimAndUpdate.holdValues:type_name -> cotaparser.api.v1.HoldCotaNFTValueVec
	18, // 47: cotaparser.api.v1.ClaimAndUpdate.claimKeys:type_name -> cotaparser.api.v1.ClaimCotaNFTKeyVec
	21, // 48: cotaparser.api.v1.ClaimAndUpdate.claim_infos:type_name -> cotaparser.api.v1.ClaimCotaNFTInfoVec
	18, // 49: cotaparser.api.v1.TransferAndUpdate.claimKeys:type_name -> cotaparser.api.v1.ClaimCotaNFTKeyVec
	21, // 50: cotaparser.api.v1.TransferAndUpdate.claim_infos:type_name -> cotaparser.api.v1.ClaimCotaNFTInfoVec
	7,  // 51: cotaparser.api.v1.TransferAndUpdate.v0Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyVec
	8,  // 52: cotaparser.api.v1.TransferAndUpdate.v1Keys:type_name -> cotaparser.api.v1.WithdrawalCotaNFTKeyV1Vec
	13, // 53: cotaparser.api.v1.TransferAndUpdate.v0Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValue
	14, // 54: cotaparser.api.v1.TransferAndUpdate.v1Values:type_name -> cotaparser.api.v1.WithdrawalCotaNFTValueV1
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_api_cotaparser_v1_entry_proto_init() }
func file_api_cotaparser_v1_entry_proto_init() {
	if File_api_cotaparser_v1_entry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_cotaparser_v1_entry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineCotaNFTId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineCotaNFTValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineCotaNFTKeyVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineCotaNFTValueVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Define); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CotaNFTId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTKeyVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTKeyV1Vec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTKeyV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTValueVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTValueV1Vec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CotaNFTInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalCotaNFTValueV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldCotaNFTKeyVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldCotaNFTValueVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimCotaNFTKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimCotaNFTKeyVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimCotaNFTValueVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimCotaNFTInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimCotaNFTInfoVec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Claim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimAndUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cotaparser_v1_entry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferAndUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_cotaparser_v1_entry_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Mint_V0Keys)(nil),
		(*Mint_V1Keys)(nil),
		(*Mint_V0Values)(nil),
		(*Mint_V1Values)(nil),
	}
	file_api_cotaparser_v1_entry_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Withdraw_V0Keys)(nil),
		(*Withdraw_V1Keys)(nil),
		(*Withdraw_V0Values)(nil),
		(*Withdraw_V1Values)(nil),
	}
	file_api_cotaparser_v1_entry_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*Transfer_V0Keys)(nil),
		(*Transfer_V1Keys)(nil),
		(*Transfer_V0Values)(nil),
		(*Transfer_V1Values)(nil),
	}
	file_api_cotaparser_v1_entry_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*TransferAndUpdate_V0Keys)(nil),
		(*TransferAndUpdate_V1Keys)(nil),
		(*TransferAndUpdate_V0Values)(nil),
		(*TransferAndUpdate_V1Values)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cotaparser_v1_entry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cotaparser_v1_entry_proto_goTypes,
		DependencyIndexes: file_api_cotaparser_v1_entry_proto_depIdxs,
		MessageInfos:      file_api_cotaparser_v1_entry_proto_msgTypes,
	}.Build()
	File_api_cotaparser_v1_entry_proto = out.File
	file_api_cotaparser_v1_entry_proto_rawDesc = nil
	file_api_cotaparser_v1_entry_proto_goTypes = nil
	file_api_cotaparser_v1_entry_proto_depIdxs = nil
}
